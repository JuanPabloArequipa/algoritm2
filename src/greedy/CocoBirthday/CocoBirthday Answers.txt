a. Identify the greedy choice.
Choose the first guest from a non-increasing sorted list (with the highest happiness) to enter the party next in each iteration.

b. Identify the optimal substructure.
OptimalSolution(Global) = GuestsSortedList[0] > 0 ? OptimalSolution(Global - GuestsSortedList[0]) : break
The LocalSolution is always take the first guest from a sorted list until there are no guests with positive happiness.

d. What is the time complexity of your solution?
O(n log n)